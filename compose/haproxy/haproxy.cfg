global
  daemon
  maxconn 2048

defaults
  mode http
  timeout connect 5s
  timeout client  30s
  timeout server  30s

# Frontend for Kubernetes NodePort HTTP ingress routing via host-based ACLs
frontend fe_kube_http
  bind *:23080
  # BEGIN DYNAMIC ACL (managed by scripts/haproxy_route.sh)
  acl host_devops  hdr(host) -i devops.local
  use_backend be_devops if host_devops
  acl host_argocd.devop  hdr(host) -i argocd.devop.local
  use_backend be_argocd.devop if host_argocd.devop
  acl host_devop  hdr(host) -i devop.local
  use_backend be_devop if host_devop
  acl host_test-k3d-fixed  hdr(host) -i test-k3d-fixed.local
  use_backend be_test-k3d-fixed if host_test-k3d-fixed
  acl host_prod-k3d  hdr(host) -i prod-k3d.local
  use_backend be_prod-k3d if host_prod-k3d
  acl host_prod  hdr(host) -i prod.local
  use_backend be_prod if host_prod
  acl host_uat  hdr(host) -i uat.local
  use_backend be_uat if host_uat
  acl host_dev  hdr(host) -i dev.local
  use_backend be_dev if host_dev
  acl host_invalid-env  hdr(host) -i invalid-env.local
  use_backend be_invalid-env if host_invalid-env
  acl host_test-k3d  hdr(host) -i test-k3d.local
  use_backend be_test-k3d if host_test-k3d
  acl host_qa1  hdr(host) -i qa1.local
  use_backend be_qa1 if host_qa1
  acl host_qa  hdr(host) -i qa.local
  use_backend be_qa if host_qa
  acl host_argocd  hdr(host) -i argocd.local
  use_backend be_argocd if host_argocd
  acl host_dev-argocd  hdr(host) -i dev-argocd.local
  use_backend be_dev-argocd if host_dev-argocd
  acl host_uat-argocd  hdr(host) -i uat-argocd.local
  use_backend be_uat-argocd if host_uat-argocd
  acl host_prod-argocd  hdr(host) -i prod-argocd.local
  use_backend be_prod-argocd if host_prod-argocd
  acl host_dev-k3d-argocd  hdr(host) -i dev-k3d-argocd.local
  use_backend be_dev-k3d-argocd if host_dev-k3d-argocd
  acl host_uat-k3d-argocd  hdr(host) -i uat-k3d-argocd.local
  use_backend be_uat-k3d-argocd if host_uat-k3d-argocd
  acl host_prod-k3d-argocd  hdr(host) -i prod-k3d-argocd.local
  use_backend be_prod-k3d-argocd if host_prod-k3d-argocd
  # END DYNAMIC ACL
  default_backend be_default_404

# Portainer exposure: HTTP redirect to HTTPS passthrough
frontend fe_portainer_http
  bind *:23380
  mode http
  http-request redirect code 301 location https://192.168.51.30:23343/

frontend fe_portainer_https
  bind *:23343
  mode tcp
  default_backend be_portainer_tls

# ArgoCD (devops cluster) exposure via dedicated port
frontend fe_argocd_devops
  bind *:23800
  mode http
  http-request set-header Host argocd.devops.local
  default_backend be_argocd_devops_direct

## dynamic backends
# BEGIN DYNAMIC BACKENDS (managed by scripts/haproxy_route.sh)
backend be_devops
  server s1 10.10.2.2:30800
backend be_argocd.devop
  server s1 10.10.1.2:30562
backend be_devop
  server s1 10.10.1.2:30562
backend be_test-k3d-fixed
  server s1 127.0.0.1:30080
backend be_prod-k3d
  server s1 host.docker.internal:38091
backend be_prod
  server s1 127.0.0.1:30080
backend be_uat
  server s1 127.0.0.1:30080
backend be_dev
  server s1 127.0.0.1:30080
backend be_invalid-env
  server s1 10.10.8.2:30080
backend be_test-k3d
  server s1 172.19.0.3:30080
backend be_qa1
  server s1 172.19.0.4:30080
backend be_qa
  server s1 172.19.0.3:30080
backend be_argocd
  server s1 10.10.6.2:30800
backend be_dev-argocd
  server s1 172.19.0.2:30800
backend be_uat-argocd
  server s1 172.19.0.3:30800
backend be_prod-argocd
  server s1 172.19.0.4:30800
backend be_dev-k3d-argocd
  server s1 host.docker.internal:18091
backend be_uat-k3d-argocd
  server s1 host.docker.internal:28091
backend be_prod-k3d-argocd
  server s1 host.docker.internal:38091
backend be_portainer_http
  server s1 host.docker.internal:9000

backend be_portainer_tls
  mode tcp
  server s1 host.docker.internal:9443

backend be_argocd_devops_direct
  server s1 10.10.2.2:80

backend be_default_404
  http-request return status 404 content-type text/plain lf-string "not found"
